<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                          http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop.xsd
                          http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 配置组件扫描:Spring层不扫描Spring层的注解：原因：各司其职 -->
    <context:component-scan base-package="cn.ylj">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>

    <!-- Aop自动代理 -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>


<!--    <bean id="myAspect" class="cn.ylj.aspect.MyAspect"></bean>-->
<!--    <bean id="ds" class="com.alibaba.druid.pool.DruidDataSource" factory-bean=""></bean>-->

<!--    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
<!--        <property name="dataSource" ref="ds"></property>-->
<!--    </bean>-->

    <aop:config>
        <aop:aspect ref="myAspect">
            <!--切点表达式抽取-->
            <aop:pointcut id="mypointcut" expression="execution(* cn.ylj.mapper.impl.UserDaoImpl.*(..))"/>

            <aop:before method="before" pointcut-ref="mypointcut"></aop:before>
            <aop:after-returning method="after" pointcut-ref="mypointcut"></aop:after-returning>
            <aop:after method="after" pointcut-ref="mypointcut"></aop:after>
            <aop:around method="around" pointcut-ref="mypointcut"></aop:around>
            <aop:after-throwing method="afterThrowing" pointcut-ref="mypointcut"></aop:after-throwing>
        </aop:aspect>
    </aop:config>

<!--  申明式事务  -->
    <!-- 平台事务管理器(指定Dao层用jdbc技术) -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="ds"></property>
    </bean>

    <!--  事务的注解驱动,可以扫描@Transaction -->
<!--    <tx:annotation-driven></tx:annotation-driven>-->
<!--    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>-->

    <!-- 通知(开启事务，提交事务，回滚事务，涉及到具体的数据库api，所以要持有平台事务管理器实例)   -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--  切点方法的事务参数列表(下列表中的方法肯定要被切点表达式命中)  -->
            <tx:method name="transfer" isolation="REPEATABLE_READ" propagation="REQUIRED" timeout="-1" read-only="false"/>
            <tx:method name="selectAll" isolation="REPEATABLE_READ" propagation="REQUIRED" timeout="-1" read-only="true"/>
            <tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED" timeout="-1" read-only="false"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 织入关系   -->
    <aop:config>
        <aop:pointcut id="pt" expression="execution(* cn.ylj.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt"></aop:advisor>
    </aop:config>


<!-- Mybatis -->
    <!--  加载外部properties属性文件  -->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
    <!--    注入SqlSessionFactory对象-->
    <bean id="ds" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="ds"></property>
        <!--  加载核心配置文件  -->
        <property name="configLocation" value="classpath:spring-sqlMapConfig.xml"></property>
    </bean>

    <!-- 扫描mapper接口，创建代理sqlSession的动态代理对象，在核心配置文件中也能配，但是Mybatis给出了兼容spring的配置类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--  扫描完这个包，IoC容器中就有代理类了 -->
        <property name="basePackage" value="cn.ylj.mapper"></property>
    </bean>
</beans>
